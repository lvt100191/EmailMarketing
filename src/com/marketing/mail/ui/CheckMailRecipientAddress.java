/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.marketing.mail.ui;

import com.marketing.db.FeedMailDao;
import com.marketing.db.MailBlockDao;
import com.marketing.db.MailDao;
import com.marketing.entity.Mail;
import com.marketing.entity.MailBlock;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author TUNGLV
 */
public class CheckMailRecipientAddress extends javax.swing.JFrame {

    /**
     * Creates new form CheckMailRecipientAddress
     */
    public CheckMailRecipientAddress() {
               initComponents();
        setLocationRelativeTo(null);
        this.setResizable(false);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaLstMailCheck = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaListMailValid = new javax.swing.JTextArea();
        btCheck = new javax.swing.JButton();
        btExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaLstMailInvalid = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kiểm tra địa chỉ mail nhận");

        txtAreaLstMailCheck.setColumns(20);
        txtAreaLstMailCheck.setLineWrap(true);
        txtAreaLstMailCheck.setRows(5);
        jScrollPane1.setViewportView(txtAreaLstMailCheck);

        txtAreaListMailValid.setColumns(20);
        txtAreaListMailValid.setLineWrap(true);
        txtAreaListMailValid.setRows(5);
        jScrollPane2.setViewportView(txtAreaListMailValid);

        btCheck.setText("Kiểm tra");
        btCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCheckActionPerformed(evt);
            }
        });

        btExit.setText("Quay lại");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        jLabel1.setText("Danh sách mail kiểm tra");

        jLabel2.setText("Danh sách mail hợp lệ");

        txtAreaLstMailInvalid.setColumns(20);
        txtAreaLstMailInvalid.setLineWrap(true);
        txtAreaLstMailInvalid.setRows(5);
        jScrollPane3.setViewportView(txtAreaLstMailInvalid);

        jLabel3.setText("Dách mail không hợp lệ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(121, 121, 121))
            .addGroup(layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(btCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(btExit, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(112, 112, 112))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane2))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btExit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //muc dich kiem tra mail nhan thu thap duoc trong bang tbl_mail
    private void btCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCheckActionPerformed
         //lay danh sach mail can kiem tra
        String[] lstMailCheck = txtAreaLstMailCheck.getText().trim().split("\n");
        String listMailAddressValid = "";
        String listMailAddressInValid = "";

        
        for (String mailCheck: lstMailCheck) {
            if (mailCheck.contains("@gmail.com")) {
                Matcher m = Pattern.compile("[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+").matcher(mailCheck);
                while (m.find()) {
                    try {
                        String mail = m.group();
                        char end = mail.charAt(mail.length() - 1);
                        if (end == '.') {
                            mail = mail.substring(0, mail.length() - 1);
                        }
                        //kiem tra dieu kien truoc khi insert vao db
                        //truong hop mail ko bi chan va mail chua co trong
                        //bang tbl_mail
                        if (mail != null) {
                            mail = mail.trim();
                            mail = mail.toLowerCase();
                        }
                        if (!checkMailBlock(mail) && checkAddressMail(mail)) {
                            if (!listMailAddressValid.contains(mail)) {
                                listMailAddressValid = listMailAddressValid + mail + "\n";
                            }
                        } else {
                            listMailAddressInValid = listMailAddressInValid + mail + "\n";
                            //insert vao bang mail_blocked
                            insertMailBlock(mail.trim());
                        }

                    } catch (Exception e) {
                        System.out.println("Exception: " + e.getMessage());
                        e.printStackTrace();

                    }
                }
            }else{
                try {
                    listMailAddressInValid = listMailAddressInValid + mailCheck + "\n";
                    //insert vao bang mail_blocked
                    insertMailBlock(mailCheck.trim());
                } catch (Exception ex) {
                    Logger.getLogger(CheckMailRecipientAddress.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
        txtAreaListMailValid.setText(listMailAddressValid);
        txtAreaLstMailInvalid.setText(listMailAddressInValid);
    }//GEN-LAST:event_btCheckActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new DashBoard();
    }//GEN-LAST:event_btExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckMailRecipientAddress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckMailRecipientAddress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckMailRecipientAddress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckMailRecipientAddress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckMailRecipientAddress().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCheck;
    private javax.swing.JButton btExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtAreaListMailValid;
    private javax.swing.JTextArea txtAreaLstMailCheck;
    private javax.swing.JTextArea txtAreaLstMailInvalid;
    // End of variables declaration//GEN-END:variables

   //check dia chi mail co bi chan hay chua
    //false: mail chua ton tai
    //true: mail da ton tai
    private static boolean checkMailBlock(String mail) throws Exception {
        //ko insert mail đã tồn tại trong danh sách mail chặn tbl_mail_block
        MailBlock mailBlock = MailBlockDao.getByEmail(mail);
        if (mailBlock != null) {
            return true;
        }
        return false;
    }

 private static boolean checkAddressMail(String mail) {
        if (mail.contains("@gmail.con")) {
            return false;
        }
        if (mail.contains("@gmail.com.")) {
            return false;
        }
        if (mail.contains("@gamil.com")) {
            return false;
        }
        if (mail.contains("..")) {
            return false;
        }
        if (mail.startsWith("_")) {
            return false;
        }
        if (mail.startsWith(".")) {
            return false;
        }

        if (mail.startsWith("0")) {
            return false;
        }
        if (mail.startsWith("1")) {
            return false;
        }
        if (mail.startsWith("2")) {
            return false;
        }
        if (mail.startsWith("3")) {
            return false;
        }
        if (mail.startsWith("4")) {
            return false;
        }
        if (mail.startsWith("5")) {
            return false;
        }
        if (mail.startsWith("6")) {
            return false;
        }
        if (mail.startsWith("7")) {
            return false;
        }
        if (mail.startsWith("8")) {
            return false;
        }
        if (mail.startsWith("9")) {
            return false;
        }

        return true;
    }

    private void insertMailBlock(String mailLock) throws Exception {
                    //kiem tra mail da ton tai trong bang tbl_mail_blocked hay chua
            mailLock = mailLock.toLowerCase();
            if(!checkMailBlocked(mailLock.trim())){
             //tim mail trong bang tbl_mail lay ra id cua ban ghi
             Mail m = MailDao.getByEmail(mailLock);
             //xoa ban ghi trong bang tbl_feed_mail theo id
             if(m !=null){
             FeedMailDao.deleteFeedMail(m.getId());
             //xoa ban ghi trong bang tbl_mail
             MailDao.deleteMail(m.getId());
             }
             //insert vao bang tbl_mail_blocked
             MailBlock mb = initMailBlock(mailLock);
             MailBlockDao.insert(mb);
            }
    }


   //check dia chi mail co bi chan hay chua
    //false: mail chua ton tai
    //true: mail da ton tai
    private static boolean checkMailBlocked(String mail) throws Exception {
        //ko insert mail đã tồn tại trong danh sách mail chặn tbl_mail_block
        MailBlock mailBlock = MailBlockDao.getByEmail(mail);
        if (mailBlock != null) {
            return true;
        }
        return false;
    }

     private MailBlock initMailBlock(String mailLock) {
       MailBlock m = new MailBlock();
       m.setMailBlock(mailLock);
       Date d = new Date();
       SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
       String dateCreate = sdf.format(d);
       m.setCreateDate(dateCreate);
       return m;
    }

}
