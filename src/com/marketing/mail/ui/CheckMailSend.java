/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.marketing.mail.ui;

import com.marketing.db.MailSendDao;
import com.marketing.entity.MailSend;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author PMDVCNTT
 */
public class CheckMailSend extends javax.swing.JFrame {

    /**
     * Creates new form CheckMailSend
     */
    public CheckMailSend() {
        initComponents();
        setLocationRelativeTo(null);
        this.setResizable(false);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaListMailSend = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        txtNumMailSend = new javax.swing.JTextField();
        btCheckMailSend = new javax.swing.JButton();
        btExit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtCheckTime = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtSumMailSend = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kiểm tra mail gửi");

        jLabel1.setText("Kết quả kiểm tra");

        txtAreaListMailSend.setColumns(20);
        txtAreaListMailSend.setLineWrap(true);
        txtAreaListMailSend.setRows(5);
        jScrollPane1.setViewportView(txtAreaListMailSend);

        jLabel2.setText("Số mail được phép gửi");

        btCheckMailSend.setText("Kiểm tra mail gửi");
        btCheckMailSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCheckMailSendActionPerformed(evt);
            }
        });

        btExit.setText("Quay lại");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        jLabel3.setText("Điều kiện: (thời gian hiện tại - thời gian gửi gần nhất) >=");

        jLabel4.setText("Tổng số mail gửi");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(btCheckMailSend)
                                .addGap(74, 74, 74)
                                .addComponent(btExit, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCheckTime))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSumMailSend)
                                    .addComponent(txtNumMailSend))))
                        .addGap(0, 29, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCheckTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtSumMailSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNumMailSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCheckMailSend)
                    .addComponent(btExit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        this.dispose();
        new DashBoard();
    }//GEN-LAST:event_btExitActionPerformed

    private void btCheckMailSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCheckMailSendActionPerformed
        try {
            txtAreaListMailSend.setText(null);
            txtNumMailSend.setText("0");
            txtSumMailSend.setText("0");
            ArrayList<MailSend> lst = MailSendDao.getListMailSend();
            if (lst != null && lst.size() > 0) {
                txtSumMailSend.setText(String.valueOf(lst.size()));
            }
            String lstMailSend = "";
            int count = 0;
            if (txtCheckTime.getText() == null || txtCheckTime.getText().isEmpty()) {
                lstMailSend = lstMailSend + "Yêu cầu nhập: \n[Điều kiện: (thời gian hiện tại - thời gian gửi gần nhất) >=]";
            } else {
                int CHECK_TIME = Integer.parseInt(txtCheckTime.getText().trim());

                try {
                    //lay ra danh sach mail gui
                    ArrayList<MailSend> lstSend = MailSendDao.getListMailSend();
                    for (MailSend mailSend : lstSend) {
                        //neu gia tri mailSend.getLastTime() khac null va khac ""
                        if (mailSend.getLastTime() != null && !mailSend.getLastTime().isEmpty()) {
                            boolean checkTimeSend = checkRunTime(mailSend.getLastTime(), CHECK_TIME);
                            //thoi gian thoa man gui mail
                            if (checkTimeSend) {
                                count++;
                                lstMailSend = lstMailSend + mailSend.getEmail().trim() + " \n";
                            }
                        } else {
                            count++;
                            lstMailSend = lstMailSend + mailSend.getEmail().trim() + " \n";
                        }

                    }
                    if (count > 0) {
                        txtNumMailSend.setText(String.valueOf(count));
                    } else {
                        lstMailSend = "Không có kết quả thỏa mãn";
                    }
                } catch (Exception ex) {
                    Logger.getLogger(SendMail.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            txtAreaListMailSend.setText(lstMailSend);
        } catch (Exception ex) {
            Logger.getLogger(CheckMailSend.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btCheckMailSendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckMailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckMailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckMailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckMailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckMailSend().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCheckMailSend;
    private javax.swing.JButton btExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAreaListMailSend;
    private javax.swing.JTextField txtCheckTime;
    private javax.swing.JTextField txtNumMailSend;
    private javax.swing.JTextField txtSumMailSend;
    // End of variables declaration//GEN-END:variables

    private boolean checkRunTime(String lastDate, int days) throws ParseException {
        SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
        Date endDate = format.parse(lastDate);

        Calendar cal = Calendar.getInstance();
        cal.setTime(endDate);
        cal.add(Calendar.DATE, days); //minus number would decrement the days
        Date endDateAddValue = cal.getTime();

        Date currentDate = new Date();
        if (endDateAddValue.before(currentDate)) {
            return true;
        }
        return false;
    }
}
